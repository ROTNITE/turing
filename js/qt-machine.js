// path: js/qt-machine.js

import { QuantumRegister } from './quantum-register.js';
import { QuantumTape } from './quantum-tape.js';
import { Algorithms } from './algorithms.js';
import { Utils } from './utils.js';

/**
 * –ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¢—å—é—Ä–∏–Ω–≥–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class QTMachine {
    constructor() {
        this.quantumRegister = new QuantumRegister(2); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∫—É–±–∏—Ç–∞
        this.tapes = [
            new QuantumTape('input'),    // –õ–µ–Ω—Ç–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            new QuantumTape('work'),     // –†–∞–±–æ—á–∞—è –ª–µ–Ω—Ç–∞  
            new QuantumTape('output')    // –õ–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ];
        
        this.isRunning = false;
        this.isPaused = false;
        this.stepCount = 0;
        this.startTime = 0;
        this.elapsedTime = 0;
        this.speed = 5; // 1-10
        this.mode = 'manual'; // 'manual' | 'algorithm'
        
        this.currentAlgorithm = null;
        this.algorithmStep = 0;
        this.history = [];
        this.maxHistoryLength = 1000;
        
        // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        this.onStateChange = null;
        this.onStep = null;
        this.onMeasurement = null;
        
        console.log('ü§ñ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¢—å—é—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    start() {
        if (this.isRunning) {
            console.warn('–°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }
        
        this.isRunning = true;
        this.isPaused = false;
        this.startTime = performance.now();
        
        console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏');
        this.addToHistory('start', '–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
        
        if (this.mode === 'algorithm' && this.currentAlgorithm) {
            this.runAlgorithm();
        } else {
            this.runContinuous();
        }
        
        this.notifyStateChange();
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    stop() {
        if (!this.isRunning) {
            console.warn('–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }
        
        this.isRunning = false;
        this.updateElapsedTime();
        
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏');
        this.addToHistory('stop', '–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        
        this.notifyStateChange();
    }
    
    /**
     * –ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    pause() {
        if (!this.isRunning) return;
        
        this.isPaused = !this.isPaused;
        
        if (this.isPaused) {
            this.updateElapsedTime();
            console.log('‚è∏Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        } else {
            this.startTime = performance.now() - this.elapsedTime;
            console.log('‚ñ∂Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
        
        this.notifyStateChange();
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
     */
    step() {
        try {
            this.stepCount++;
            console.log(`üë£ –®–∞–≥ ${this.stepCount}`);
            
            if (this.mode === 'algorithm' && this.currentAlgorithm) {
                this.executeAlgorithmStep();
            } else {
                this.executeManualStep();
            }
            
            this.addToHistory('step', `–í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ ${this.stepCount}`);
            this.notifyStep();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–≥–∞:', error);
            this.addToHistory('error', `–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${this.stepCount}: ${error.message}`);
            throw error;
        }
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.stop();
        
        this.stepCount = 0;
        this.elapsedTime = 0;
        this.algorithmStep = 0;
        this.history = [];
        
        // –°–±—Ä–æ—Å –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        this.quantumRegister.reset();
        
        // –°–±—Ä–æ—Å –ª–µ–Ω—Ç
        this.tapes.forEach(tape => tape.reset());
        
        console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
        this.addToHistory('reset', '–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        
        this.notifyStateChange();
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤–µ–Ω—Ç–∏–ª—è
     */
    applyGate(gateName, ...qubits) {
        try {
            this.quantumRegister.applyGate(gateName, ...qubits);
            
            const qubitsStr = qubits.length > 1 ? `–∫—É–±–∏—Ç–∞–º ${qubits.join(',')}` : `–∫—É–±–∏—Ç—É ${qubits[0]}`;
            console.log(`üö™ –ü—Ä–∏–º–µ–Ω–µ–Ω –≤–µ–Ω—Ç–∏–ª—å ${gateName} –∫ ${qubitsStr}`);
            
            this.addToHistory('gate', `${gateName}(${qubits.join(',')})`, {
                gate: gateName,
                qubits: qubits,
                state: this.quantumRegister.getState()
            });
            
            this.notifyStateChange();
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è ${gateName}:`, error);
            throw error;
        }
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫—É–±–∏—Ç–∞
     */
    measureQubit(qubitIndex) {
        try {
            const result = this.quantumRegister.measure(qubitIndex);
            
            console.log(`üìè –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫—É–±–∏—Ç–∞ ${qubitIndex}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${result}`);
            
            this.addToHistory('measurement', `–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫—É–±–∏—Ç–∞ ${qubitIndex} ‚Üí |${result}‚ü©`, {
                qubit: qubitIndex,
                result: result,
                state: this.quantumRegister.getState()
            });
            
            this.notifyMeasurement(qubitIndex, result);
            this.notifyStateChange();
            
            return result;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:', error);
            throw error;
        }
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤
     */
    measureAll() {
        try {
            const results = [];
            const numQubits = this.quantumRegister.getNumQubits();
            
            for (let i = 0; i < numQubits; i++) {
                results.push(this.quantumRegister.measure(i));
            }
            
            console.log(`üìê –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤: |${results.join('')}‚ü©`);
            
            this.addToHistory('measurement_all', `–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤ ‚Üí |${results.join('')}‚ü©`, {
                results: results,
                state: this.quantumRegister.getState()
            });
            
            this.notifyMeasurement('all', results);
            this.notifyStateChange();
            
            return results;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    loadPreset(presetName) {
        try {
            console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${presetName}`);
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.reset();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            switch (presetName) {
                case 'bell-phi-plus':
                    Algorithms.createBellState(this.quantumRegister, 'phi-plus');
                    break;
                    
                case 'bell-phi-minus':
                    Algorithms.createBellState(this.quantumRegister, 'phi-minus');
                    break;
                    
                case 'bell-psi-plus':
                    Algorithms.createBellState(this.quantumRegister, 'psi-plus');
                    break;
                    
                case 'bell-psi-minus':
                    Algorithms.createBellState(this.quantumRegister, 'psi-minus');
                    break;
                    
                case 'deutsch-constant':
                    this.currentAlgorithm = 'deutsch';
                    this.mode = 'algorithm';
                    Algorithms.setupDeutschAlgorithm(this.quantumRegister, 'constant');
                    break;
                    
                case 'deutsch-balanced':
                    this.currentAlgorithm = 'deutsch';
                    this.mode = 'algorithm';
                    Algorithms.setupDeutschAlgorithm(this.quantumRegister, 'balanced');
                    break;
                    
                case 'grover-00':
                    this.currentAlgorithm = 'grover';
                    this.mode = 'algorithm';
                    Algorithms.setupGroverAlgorithm(this.quantumRegister, '00');
                    break;
                    
                case 'grover-01':
                    this.currentAlgorithm = 'grover';
                    this.mode = 'algorithm';
                    Algorithms.setupGroverAlgorithm(this.quantumRegister, '01');
                    break;
                    
                case 'grover-10':
                    this.currentAlgorithm = 'grover';
                    this.mode = 'algorithm';
                    Algorithms.setupGroverAlgorithm(this.quantumRegister, '10');
                    break;
                    
                case 'grover-11':
                    this.currentAlgorithm = 'grover';
                    this.mode = 'algorithm';
                    Algorithms.setupGroverAlgorithm(this.quantumRegister, '11');
                    break;
                    
                default:
                    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: ${presetName}`);
            }
            
            this.addToHistory('preset', `–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: ${presetName}`);
            console.log(`‚úÖ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ ${presetName} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            
            this.notifyStateChange();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            throw error;
        }
    }
    
    /**
     * –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
     */
    runContinuous() {
        if (!this.isRunning || this.isPaused) return;
        
        try {
            this.step();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ:', error);
            this.stop();
            return;
        }
        
        // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        const delay = Math.max(50, 1000 / this.speed);
        setTimeout(() => this.runContinuous(), delay);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     */
    runAlgorithm() {
        if (!this.isRunning || this.isPaused || !this.currentAlgorithm) return;
        
        try {
            const isComplete = this.executeAlgorithmStep();
            
            if (isComplete) {
                console.log(`‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º ${this.currentAlgorithm} –∑–∞–≤–µ—Ä—à–µ–Ω`);
                this.addToHistory('algorithm_complete', `–ê–ª–≥–æ—Ä–∏—Ç–º ${this.currentAlgorithm} –∑–∞–≤–µ—Ä—à–µ–Ω`);
                this.stop();
                return;
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ:', error);
            this.stop();
            return;
        }
        
        // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        const delay = Math.max(500, 2000 / this.speed); // –ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ
        setTimeout(() => this.runAlgorithm(), delay);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     */
    executeAlgorithmStep() {
        if (!this.currentAlgorithm) return true;
        
        switch (this.currentAlgorithm) {
            case 'deutsch':
                return Algorithms.executeDeutschStep(this.quantumRegister, this.algorithmStep++);
                
            case 'grover':
                return Algorithms.executeGroverStep(this.quantumRegister, this.algorithmStep++);
                
            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${this.currentAlgorithm}`);
                return true;
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —à–∞–≥–∞
     */
    executeManualStep() {
        // –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—á–µ—Ç—á–∏–∫–∏
        // –†–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ applyGate/measure
        this.updateElapsedTime();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
     */
    setSpeed(speed) {
        this.speed = Math.max(1, Math.min(10, speed));
        console.log(`‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${this.speed}`);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState() {
        return {
            isRunning: this.isRunning,
            isPaused: this.isPaused,
            stepCount: this.stepCount,
            elapsedTime: this.elapsedTime,
            speed: this.speed,
            mode: this.mode,
            currentAlgorithm: this.currentAlgorithm,
            algorithmStep: this.algorithmStep,
            quantumState: this.quantumRegister.getState(),
            tapes: this.tapes.map(tape => tape.getState())
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
     */
    getQuantumRegister() {
        return this.quantumRegister;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
     */
    getTape(index) {
        return this.tapes[index] || null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–µ–Ω—Ç
     */
    getTapes() {
        return this.tapes;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
     */
    getHistory() {
        return this.history;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusText() {
        if (this.isRunning) {
            if (this.isPaused) {
                return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            } else if (this.mode === 'algorithm') {
                return `–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${this.currentAlgorithm}`;
            } else {
                return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
            }
        } else {
            return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(type, message, data = null) {
        const entry = {
            timestamp: Date.now(),
            step: this.stepCount,
            type: type,
            message: message,
            data: data
        };
        
        this.history.push(entry);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > this.maxHistoryLength) {
            this.history = this.history.slice(-this.maxHistoryLength + 100);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    updateElapsedTime() {
        if (this.startTime > 0) {
            this.elapsedTime = performance.now() - this.startTime;
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    notifyStateChange() {
        if (this.onStateChange) {
            this.onStateChange(this.getState());
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
     */
    notifyStep() {
        if (this.onStep) {
            this.onStep(this.stepCount);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ—Ä–µ–Ω–∏–∏
     */
    notifyMeasurement(qubit, result) {
        if (this.onMeasurement) {
            this.onMeasurement(qubit, result);
        }
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    serialize() {
        return {
            stepCount: this.stepCount,
            elapsedTime: this.elapsedTime,
            mode: this.mode,
            currentAlgorithm: this.currentAlgorithm,
            algorithmStep: this.algorithmStep,
            quantumRegister: this.quantumRegister.serialize(),
            tapes: this.tapes.map(tape => tape.serialize()),
            history: this.history.slice(-50) // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        };
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    deserialize(data) {
        this.stepCount = data.stepCount || 0;
        this.elapsedTime = data.elapsedTime || 0;
        this.mode = data.mode || 'manual';
        this.currentAlgorithm = data.currentAlgorithm || null;
        this.algorithmStep = data.algorithmStep || 0;
        
        if (data.quantumRegister) {
            this.quantumRegister.deserialize(data.quantumRegister);
        }
        
        if (data.tapes) {
            data.tapes.forEach((tapeData, index) => {
                if (this.tapes[index]) {
                    this.tapes[index].deserialize(tapeData);
                }
            });
        }
        
        if (data.history) {
            this.history = data.history;
        }
        
        console.log('üì• –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.notifyStateChange();
    }
}

// path: js/algorithms.js
/**
 * –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –î–æ–π—á–∞ –∏ –ì—Ä–æ–≤–µ—Ä–∞
 * 
 * @author Quantum Computing Expert
 * @version 2.0.0
 */

import { Complex } from './complex.js';
import { QuantumState } from './quantum-state.js';
import { QuantumRegister } from './quantum-register.js';
import { QuantumGates, QuantumMatrix } from './quantum-gates.js';
import { QuantumTape } from './quantum-tape.js';

export class QuantumAlgorithms {
    
    // ============================================================================
    // –ê–õ–ì–û–†–ò–¢–ú –î–û–ô–ß–ê
    // ============================================================================

    /**
     * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–æ–π—á–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±—É–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {string} functionType - –¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏: 'constant-0', 'constant-1', 'balanced-identity', 'balanced-not'
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     */
    static deutschAlgorithm(functionType) {
        console.log(`üî¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–æ–π—á–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: ${functionType}`);
        
        // –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
        const register = new QuantumRegister(2);
        const steps = [];
        
        // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è |01‚ü©
        register.setAmplitude(1, Complex.ONE); // |01‚ü©
        steps.push({
            step: 1,
            operation: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ |01‚ü©',
            state: register.toString(),
            description: '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –∫—É–±–∏—Ç—ã: –ø–µ—Ä–≤—ã–π –≤ |0‚ü©, –≤—Ç–æ—Ä–æ–π –≤ |1‚ü©'
        });

        // –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω—è–µ–º Hadamard –∫ –æ–±–æ–∏–º –∫—É–±–∏—Ç–∞–º
        register.applySingleQubitGate(QuantumGates.H(), 0); // H –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É
        register.applySingleQubitGate(QuantumGates.H(), 1); // H –∫ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É
        steps.push({
            step: 2,
            operation: 'H ‚äó H',
            state: register.toString(),
            description: '–°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é: |+‚ü©|-‚ü© = (|0‚ü©+|1‚ü©)(|0‚ü©-|1‚ü©)/2'
        });

        // –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä–∞–∫—É–ª —Ñ—É–Ω–∫—Ü–∏–∏
        const oracleResult = this.applyDeutschOracle(register, functionType);
        steps.push({
            step: 3,
            operation: `–û—Ä–∞–∫—É–ª Uf (${functionType})`,
            state: register.toString(),
            description: `–ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏—Ç–∞—Ä–Ω—ã–π –æ—Ä–∞–∫—É–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ f: ${oracleResult.description}`
        });

        // –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω—è–µ–º Hadamard –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É
        register.applySingleQubitGate(QuantumGates.H(), 0);
        steps.push({
            step: 4,
            operation: 'H –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É',
            state: register.toString(),
            description: '–§–∏–Ω–∞–ª—å–Ω—ã–π Hadamard –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏'
        });

        // –®–∞–≥ 5: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏—Ç–∞
        const measurementResult = register.measureQubit(0);
        steps.push({
            step: 5,
            operation: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏—Ç–∞',
            state: register.toString(),
            description: `–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${measurementResult}`
        });

        // –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const interpretation = measurementResult === 0 ? '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è' : '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è';
        const isCorrect = this.checkDeutschResult(functionType, interpretation);

        return {
            algorithm: 'Deutsch',
            functionType,
            steps,
            measurementResult,
            interpretation,
            isCorrect,
            quantumAdvantage: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2 –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–≤–∞–Ω—Ç–æ–≤–æ - 1',
            finalState: register.toString()
        };
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∞–∫—É–ª–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–æ–π—á–∞
     * @param {QuantumRegister} register - –î–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
     * @param {string} functionType - –¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–º –æ—Ä–∞–∫—É–ª–µ
     */
    static applyDeutschOracle(register, functionType) {
        let gateMatrix;
        let description;

        switch (functionType) {
            case 'constant-0':
                // f(x) = 0: –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ç–æ–∂–¥–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞)
                gateMatrix = QuantumGates.I().tensorProduct(QuantumGates.I());
                description = 'f(x) = 0 –¥–ª—è –≤—Å–µ—Ö x (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)';
                break;

            case 'constant-1':
                // f(x) = 1: –ø—Ä–∏–º–µ–Ω—è–µ–º X –∫ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É
                gateMatrix = QuantumGates.I().tensorProduct(QuantumGates.X());
                description = 'f(x) = 1 –¥–ª—è –≤—Å–µ—Ö x (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)';
                break;

            case 'balanced-identity':
                // f(x) = x: –ø—Ä–∏–º–µ–Ω—è–µ–º CNOT
                gateMatrix = QuantumGates.CNOT();
                description = 'f(0) = 0, f(1) = 1 (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–æ–∂–¥–µ—Å—Ç–≤–æ)';
                break;

            case 'balanced-not':
                // f(x) = NOT x: –ø—Ä–∏–º–µ–Ω—è–µ–º X –∫ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É, –∑–∞—Ç–µ–º CNOT
                // –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ CNOT, –∑–∞—Ç–µ–º X –∫ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É
                const xGate = QuantumGates.I().tensorProduct(QuantumGates.X());
                const cnotGate = QuantumGates.CNOT();
                gateMatrix = cnotGate;
                // –ü—Ä–∏–º–µ–Ω—è–µ–º X –∫ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É –ø–æ—Å–ª–µ CNOT
                register.applySingleQubitGate(QuantumGates.X(), 1);
                description = 'f(0) = 1, f(1) = 0 (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)';
                break;

            default:
                gateMatrix = QuantumGates.I().tensorProduct(QuantumGates.I());
                description = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–∂–¥–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É';
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä–∞–∫—É–ª –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É (–∫—Ä–æ–º–µ balanced-not, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω)
        if (functionType !== 'balanced-not') {
            const currentAmplitudes = [];
            for (let i = 0; i < register.dimension; i++) {
                currentAmplitudes.push(register.getAmplitude(i));
            }
            
            const newAmplitudes = gateMatrix.apply(currentAmplitudes);
            
            for (let i = 0; i < register.dimension; i++) {
                register.setAmplitude(i, newAmplitudes[i]);
            }
        }

        return { description, matrix: gateMatrix };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–æ–π—á–∞
     * @param {string} functionType - –¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {string} interpretation - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     * @returns {boolean} true –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
     */
    static checkDeutschResult(functionType, interpretation) {
        const expectedConstant = functionType.includes('constant');
        const gotConstant = interpretation === '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è';
        return expectedConstant === gotConstant;
    }

    // ============================================================================
    // –ê–õ–ì–û–†–ò–¢–ú –ì–†–û–í–ï–†–ê
    // ============================================================================

    /**
     * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ì—Ä–æ–≤–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {number} targetItem - –ò–Ω–¥–µ–∫—Å –∏—Å–∫–æ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (0-3 –¥–ª—è 2-–∫—É–±–∏—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è)
     * @param {number} [iterations] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ)
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     */
    static groverAlgorithm(targetItem, iterations = null) {
        console.log(`üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ì—Ä–æ–≤–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${targetItem}`);
        
        if (targetItem < 0 || targetItem > 3) {
            throw new Error('–¶–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 3 –¥–ª—è –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è');
        }

        // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è N=4: œÄ/4 * ‚àö4 ‚âà 1.57 ‚âà 1-2 –∏—Ç–µ—Ä–∞—Ü–∏–∏
        const optimalIterations = Math.floor(Math.PI / 4 * Math.sqrt(4));
        iterations = iterations ?? optimalIterations;

        const register = new QuantumRegister(2);
        const steps = [];
        
        // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–π —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏
        register.applySingleQubitGate(QuantumGates.H(), 0);
        register.applySingleQubitGate(QuantumGates.H(), 1);
        
        steps.push({
            step: 1,
            operation: 'H ‚äó H - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏',
            state: register.toString(),
            description: '–°–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: (|00‚ü©+|01‚ü©+|10‚ü©+|11‚ü©)/2',
            probabilities: register.getAllProbabilities()
        });

        // –®–∞–≥–∏ 2-N: –ò—Ç–µ—Ä–∞—Ü–∏–∏ –ì—Ä–æ–≤–µ—Ä–∞
        for (let iteration = 1; iteration <= iterations; iteration++) {
            // –û—Ä–∞–∫—É–ª: —Ñ–ª–∏–ø —Ñ–∞–∑—ã —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            this.applyGroverOracle(register, targetItem);
            steps.push({
                step: steps.length + 1,
                operation: `–ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration}: –û—Ä–∞–∫—É–ª`,
                state: register.toString(),
                description: `–ü–æ–º–µ—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç |${targetItem.toString(2).padStart(2, '0')}‚ü© –∏–Ω–≤–µ—Ä—Å–∏–µ–π —Ñ–∞–∑—ã`,
                probabilities: register.getAllProbabilities()
            });

            // –î–∏—Ñ—Ñ—É–∑–æ—Ä: –∏–Ω–≤–µ—Ä—Å–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            this.applyGroverDiffuser(register);
            steps.push({
                step: steps.length + 1,
                operation: `–ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration}: –î–∏—Ñ—Ñ—É–∑–æ—Ä`,
                state: register.toString(),
                description: '–£—Å–∏–ª–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–≤–µ—Ä—Å–∏–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ',
                probabilities: register.getAllProbabilities()
            });
        }

        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        const measurementResult = register.measureAll();
        const finalProbabilities = register.getAllProbabilities();
        
        steps.push({
            step: steps.length + 1,
            operation: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ',
            state: register.toString(),
            description: `–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${measurementResult}`,
            probabilities: finalProbabilities
        });

        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const foundCorrect = measurementResult === targetItem;
        const targetProbability = steps[steps.length - 2].probabilities[targetItem]; // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º
        
        return {
            algorithm: 'Grover',
            target: targetItem,
            iterations,
            steps,
            measurementResult,
            foundCorrect,
            targetProbability,
            quantumAdvantage: `–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏: O(N) = 4 –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º. –ö–≤–∞–Ω—Ç–æ–≤–æ: O(‚àöN) = ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏`,
            finalState: register.toString(),
            success: foundCorrect
        };
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∞–∫—É–ª–∞ –ì—Ä–æ–≤–µ—Ä–∞ (–∏–Ω–≤–µ—Ä—Å–∏—è —Ñ–∞–∑—ã —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
     * @param {QuantumRegister} register - –ö–≤–∞–Ω—Ç–æ–≤—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
     * @param {number} targetItem - –ò–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    static applyGroverOracle(register, targetItem) {
        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –∏–Ω–≤–µ—Ä—Å–∏–∏ —Ñ–∞–∑—ã
        const oracleMatrix = [];
        
        for (let i = 0; i < register.dimension; i++) {
            const row = [];
            for (let j = 0; j < register.dimension; j++) {
                if (i === j) {
                    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∑—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    row.push(i === targetItem ? new Complex(-1, 0) : Complex.ONE);
                } else {
                    row.push(Complex.ZERO);
                }
            }
            oracleMatrix.push(row);
        }

        const oracle = new QuantumMatrix(oracleMatrix);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä–∞–∫—É–ª
        const currentAmplitudes = [];
        for (let i = 0; i < register.dimension; i++) {
            currentAmplitudes.push(register.getAmplitude(i));
        }
        
        const newAmplitudes = oracle.apply(currentAmplitudes);
        
        for (let i = 0; i < register.dimension; i++) {
            register.setAmplitude(i, newAmplitudes[i]);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Ñ—Ñ—É–∑–æ—Ä–∞ –ì—Ä–æ–≤–µ—Ä–∞ (–∏–Ω–≤–µ—Ä—Å–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ)
     * @param {QuantumRegister} register - –ö–≤–∞–Ω—Ç–æ–≤—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
     */
    static applyGroverDiffuser(register) {
        // –î–∏—Ñ—Ñ—É–∑–æ—Ä = 2|s‚ü©‚ü®s| - I, –≥–¥–µ |s‚ü© = (|00‚ü©+|01‚ü©+|10‚ü©+|11‚ü©)/2
        // –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ: H‚äóH, –∏–Ω–≤–µ—Ä—Å–∏—è —Ñ–∞–∑—ã |00‚ü©, H‚äóH
        
        // –®–∞–≥ 1: H‚äóH
        register.applySingleQubitGate(QuantumGates.H(), 0);
        register.applySingleQubitGate(QuantumGates.H(), 1);
        
        // –®–∞–≥ 2: –ò–Ω–≤–µ—Ä—Å–∏—è —Ñ–∞–∑—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è |00‚ü©
        const currentAmplitude = register.getAmplitude(0);
        register.setAmplitude(0, currentAmplitude.mul(new Complex(-1, 0)));
        
        // –®–∞–≥ 3: H‚äóH
        register.applySingleQubitGate(QuantumGates.H(), 0);
        register.applySingleQubitGate(QuantumGates.H(), 1);
    }

    // ============================================================================
    // –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ï–õ–õ–ê
    // ============================================================================

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–µ–ª–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     * @param {string} bellType - –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–µ–ª–ª–∞: 'phi+', 'phi-', 'psi+', 'psi-'
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–µ–ª–ª–∞
     */
    static createBellState(bellType) {
        const register = new QuantumRegister(2);
        const steps = [];
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å |00‚ü©
        steps.push({
            step: 1,
            operation: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
            state: register.toString(),
            description: '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ |00‚ü©'
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º Hadamard –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É
        register.applySingleQubitGate(QuantumGates.H(), 0);
        steps.push({
            step: 2,
            operation: 'H –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É',
            state: register.toString(),
            description: '–°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏—Ç–∞: (|00‚ü©+|10‚ü©)/‚àö2'
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º CNOT
        register.applyTwoQubitGate(QuantumGates.CNOT(), 0, 1);
        steps.push({
            step: 3,
            operation: 'CNOT(0‚Üí1)',
            state: register.toString(),
            description: '–°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å: (|00‚ü©+|11‚ü©)/‚àö2'
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ë–µ–ª–ª–∞
        switch (bellType.toLowerCase()) {
            case 'phi-':
                // Œ¶- = (|00‚ü©-|11‚ü©)/‚àö2: –ø—Ä–∏–º–µ–Ω—è–µ–º Z –∫ –ª—é–±–æ–º—É –∫—É–±–∏—Ç—É
                register.applySingleQubitGate(QuantumGates.Z(), 0);
                steps.push({
                    step: 4,
                    operation: 'Z –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É',
                    state: register.toString(),
                    description: '–ü–æ–ª—É—á–∞–µ–º Œ¶-: (|00‚ü©-|11‚ü©)/‚àö2'
                });
                break;
                
            case 'psi+':
                // Œ®+ = (|01‚ü©+|10‚ü©)/‚àö2: –ø—Ä–∏–º–µ–Ω—è–µ–º X –∫ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É
                register.applySingleQubitGate(QuantumGates.X(), 1);
                steps.push({
                    step: 4,
                    operation: 'X –∫–æ –≤—Ç–æ—Ä–æ–º—É –∫—É–±–∏—Ç—É',
                    state: register.toString(),
                    description: '–ü–æ–ª—É—á–∞–µ–º Œ®+: (|01‚ü©+|10‚ü©)/‚àö2'
                });
                break;
                
            case 'psi-':
                // Œ®- = (|01‚ü©-|10‚ü©)/‚àö2: –ø—Ä–∏–º–µ–Ω—è–µ–º Z –∏ X
                register.applySingleQubitGate(QuantumGates.Z(), 0);
                register.applySingleQubitGate(QuantumGates.X(), 1);
                steps.push({
                    step: 4,
                    operation: 'Z –∫ –ø–µ—Ä–≤–æ–º—É, X –∫–æ –≤—Ç–æ—Ä–æ–º—É',
                    state: register.toString(),
                    description: '–ü–æ–ª—É—á–∞–µ–º Œ®-: (|01‚ü©-|10‚ü©)/‚àö2'
                });
                break;
                
            default:
                // phi+ - —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ
                break;
        }

        // –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏
        const entanglement = register.getEntanglementMeasure();
        const probabilities = register.getAllProbabilities();

        return {
            bellType: bellType.toLowerCase(),
            steps,
            finalState: register.toString(),
            entanglement,
            probabilities,
            isMaximallyEntangled: entanglement > 0.95
        };
    }

    // ============================================================================
    // –ö–í–ê–ù–¢–û–í–û–ï –°–õ–û–ñ–ï–ù–ò–ï (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    // ============================================================================

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö –æ–¥–Ω–æ–±–∏—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
     * @param {number} a - –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ 1)
     * @param {number} b - –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ 1)
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Å–ª–æ–∂–µ–Ω–∏—è
     */
    static quantumAddition(a, b) {
        if (a < 0 || a > 1 || b < 0 || b > 1) {
            throw new Error('–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0 –∏–ª–∏ 1');
        }

        const register = new QuantumRegister(3); // a, b, carry
        const steps = [];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –±–∏—Ç–æ–≤
        if (a === 1) register.applySingleQubitGate(QuantumGates.X(), 0);
        if (b === 1) register.applySingleQubitGate(QuantumGates.X(), 1);
        
        steps.push({
            step: 1,
            operation: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
            state: register.toString(),
            description: `–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º a=${a}, b=${b}, carry=0`
        });

        // –ü–æ–ª–Ω—ã–π —Å—É–º–º–∞—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é –≤–µ–Ω—Ç–∏–ª–µ–π Toffoli –∏ CNOT
        // sum = a ‚äï b ‚äï carry_in
        // carry_out = ab + carry_in(a ‚äï b)

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º CNOT –¥–ª—è XOR
        register.applyTwoQubitGate(QuantumGates.CNOT(), 0, 1); // a XOR b ‚Üí b
        
        steps.push({
            step: 2,
            operation: 'a ‚äï b',
            state: register.toString(),
            description: '–í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –ø–æ –º–æ–¥—É–ª—é 2'
        });

        // –†–µ–∑—É–ª—å—Ç–∞—Ç
        const result = register.measureAll();
        const sum = result[1];
        const carry = a * b; // –î–ª—è –æ–¥–Ω–æ–±–∏—Ç–Ω–æ–≥–æ —Å–ª–æ–∂–µ–Ω–∏—è carry = a AND b

        steps.push({
            step: 3,
            operation: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ',
            state: register.toString(),
            description: `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${a} + ${b} = ${carry}${sum} (–¥–≤–æ–∏—á–Ω–æ–µ)`
        });

        return {
            algorithm: 'QuantumAddition',
            inputs: { a, b },
            steps,
            result: { sum, carry },
            decimal: carry * 2 + sum,
            finalState: register.toString()
        };
    }

    // ============================================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ============================================================================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
     */
    static getAvailableAlgorithms() {
        return [
            {
                name: 'deutsch',
                displayName: '–ê–ª–≥–æ—Ä–∏—Ç–º –î–æ–π—á–∞',
                description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –±—É–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è/—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å',
                qubits: 2,
                complexity: 'O(1) vs O(2) –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏',
                variants: ['constant-0', 'constant-1', 'balanced-identity', 'balanced-not']
            },
            {
                name: 'grover',
                displayName: '–ü–æ–∏—Å–∫ –ì—Ä–æ–≤–µ—Ä–∞',
                description: '–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                qubits: 2,
                complexity: 'O(‚àöN) vs O(N) –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏',
                variants: [0, 1, 2, 3] // –¶–µ–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è N=4
            },
            {
                name: 'bell',
                displayName: '–°–æ—Å—Ç–æ—è–Ω–∏—è –ë–µ–ª–ª–∞',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π',
                qubits: 2,
                complexity: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏',
                variants: ['phi+', 'phi-', 'psi+', 'psi-']
            },
            {
                name: 'addition',
                displayName: '–ö–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ',
                description: '–°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö –±–∏—Ç–æ–≤ –≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏',
                qubits: 3,
                complexity: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
                variants: [[0,0], [0,1], [1,0], [1,1]]
            }
        ];
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ –∏–º–µ–Ω–∏
     * @param {string} algorithmName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     * @param {any} parameter - –ü–∞—Ä–∞–º–µ—Ç—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    static runAlgorithm(algorithmName, parameter = null) {
        switch (algorithmName.toLowerCase()) {
            case 'deutsch':
                return this.deutschAlgorithm(parameter || 'constant-0');
            
            case 'grover':
                return this.groverAlgorithm(parameter || 0);
            
            case 'bell':
                return this.createBellState(parameter || 'phi+');
            
            case 'addition':
                const [a, b] = parameter || [0, 1];
                return this.quantumAddition(a, b);
            
            default:
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${algorithmName}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     * @returns {Array} –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫
     */
    static getRecommendedPresets() {
        return [
            {
                name: 'deutsch-constant',
                displayName: '–î–æ–π—á: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
                algorithm: 'deutsch',
                parameter: 'constant-0',
                description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ f(x)=0'
            },
            {
                name: 'deutsch-balanced', 
                displayName: '–î–æ–π—á: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
                algorithm: 'deutsch',
                parameter: 'balanced-identity',
                description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ f(x)=x'
            },
            {
                name: 'grover-search',
                displayName: '–ì—Ä–æ–≤–µ—Ä: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞',
                algorithm: 'grover',
                parameter: 2,
                description: '–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ |10‚ü© –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
            },
            {
                name: 'bell-phiplus',
                displayName: '–ë–µ–ª–ª: Œ¶+ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                algorithm: 'bell',
                parameter: 'phi+',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (|00‚ü©+|11‚ü©)/‚àö2'
            },
            {
                name: 'quantum-addition',
                displayName: '–ö–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ: 1+1',
                algorithm: 'addition',
                parameter: [1, 1],
                description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ 1+1=10‚ÇÇ'
            }
        ];
    }
}
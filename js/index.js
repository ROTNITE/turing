// path: js/index.js

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ö–≤–∞–Ω—Ç–æ–≤–æ–π –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞ v2.0
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –∏—Ö –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 */

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
import { Complex } from './complex.js';
import { QuantumState } from './quantum-state.js';
import { QuantumGates } from './quantum-gates.js';
import { QuantumRegister } from './quantum-register.js';
import { QuantumTape } from './quantum-tape.js';
import { QTMachine } from './qt-machine.js';
import { BlochSphere } from './bloch.js';
import { AmplitudeVisualizer } from './viz-amplitudes.js';
import { Algorithms } from './algorithms.js';
import { UIController } from './ui-controller.js';
import { Utils } from './utils.js';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function initializeApp() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–≤–∞–Ω—Ç–æ–≤–æ–π –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞ v2.0...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        if (!Utils.checkBrowserSupport()) {
            throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const machine = new QTMachine();
        const uiController = new UIController(machine);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        await uiController.initialize();
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.quantumSimulator = {
            machine,
            ui: uiController,
            Complex,
            QuantumState,
            QuantumGates,
            QuantumRegister,
            Utils
        };
        
        console.log('‚úÖ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¢—å—é—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        console.log('üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  - quantumSimulator.machine.start() - –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏');
        console.log('  - quantumSimulator.machine.step() - –æ–¥–∏–Ω —à–∞–≥');
        console.log('  - quantumSimulator.machine.reset() - —Å–±—Ä–æ—Å');
        console.log('  - quantumSimulator.ui.loadPreset("bell-phi-plus") - –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏');
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if (window.location.search.includes('debug=1')) {
            await runQuickTests();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ' + error.message);
    }
}

/**
 * –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */
async function runQuickTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    try {
        // –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
        const c1 = new Complex(1, 0);
        const c2 = new Complex(0, 1);
        const result = c1.mul(c2);
        console.assert(Math.abs(result.im - 1) < 1e-10, 'Complex multiplication test');
        
        // –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const state = new QuantumState();
        QuantumGates.hadamard(state);
        console.assert(Math.abs(state.getProbability(0) - 0.5) < 1e-10, 'Hadamard test');
        
        // –¢–µ—Å—Ç –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const register = new QuantumRegister(2);
        register.applyGate('H', 0);
        register.applyGate('CNOT', 0, 1);
        console.assert(register.getEntanglement() > 0.9, 'CNOT entanglement test');
        
        console.log('‚úÖ –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.style.cssText = `
        position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
        background: #f56565; color: white; padding: 15px 25px;
        border-radius: 8px; font-weight: bold; z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    errorDiv.textContent = message;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => errorDiv.remove(), 10000);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
 */
function setupHotkeys() {
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.metaKey) return;
        
        const simulator = window.quantumSimulator;
        if (!simulator) return;
        
        switch (e.code) {
            case 'Space':
                e.preventDefault();
                simulator.machine.isRunning ? simulator.machine.stop() : simulator.machine.start();
                break;
            case 'KeyS':
                e.preventDefault();
                simulator.machine.step();
                break;
            case 'KeyR':
                e.preventDefault();
                simulator.machine.reset();
                break;
            case 'KeyT':
                e.preventDefault();
                simulator.ui.toggleTheme();
                break;
            case 'KeyH':
                e.preventDefault();
                simulator.ui.showHelp();
                break;
        }
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
 */
document.addEventListener('DOMContentLoaded', () => {
    initializeApp();
    setupHotkeys();
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */
window.addEventListener('error', (event) => {
    console.error('üî• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
    showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.');
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
    showErrorMessage('–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
});

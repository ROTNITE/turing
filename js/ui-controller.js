// path: js/ui-controller.js

import { Utils } from './utils.js';
import { BlochSphere } from './bloch.js';
import { AmplitudeVisualizer } from './viz-amplitudes.js';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –°–≤—è–∑—ã–≤–∞–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–∞—à–∏–Ω–æ–π
 */
export class UIController {
    constructor(machine) {
        this.machine = machine;
        this.blochSphere = null;
        this.amplitudeViz = null;
        this.isInitialized = false;
        this.theme = 'dark';
        this.updateInterval = null;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    async initialize() {
        console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            await this.initializeVisualization();
            
            // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.bindEvents();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            this.loadSettings();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.updateDisplay();
            
            this.isInitialized = true;
            console.log('‚úÖ UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI:', error);
            throw error;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async initializeVisualization() {
        // –ë–ª–æ—Ö-—Å—Ñ–µ—Ä–∞
        const blochCanvas = document.getElementById('bloch-canvas');
        if (blochCanvas) {
            this.blochSphere = new BlochSphere(blochCanvas);
            await this.blochSphere.initialize();
        }
        
        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥
        const ampCanvas = document.getElementById('amplitudes-canvas');
        if (ampCanvas) {
            this.amplitudeViz = new AmplitudeVisualizer(ampCanvas);
            await this.amplitudeViz.initialize();
        }
        
        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω—Ç
        this.initializeTapeVisualization();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π DOM
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.bindControlButtons();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        this.bindThemeToggle();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        this.bindSettingsControls();
        
        // –í–µ–Ω—Ç–∏–ª–∏
        this.bindGateButtons();
        
        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
        this.bindPresetButtons();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', Utils.debounce(() => {
            this.handleResize();
        }, 200));
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    bindControlButtons() {
        const controls = [
            { id: 'start-btn', action: () => this.machine.start() },
            { id: 'stop-btn', action: () => this.machine.stop() },
            { id: 'step-btn', action: () => this.machine.step() },
            { id: 'reset-btn', action: () => this.machine.reset() }
        ];
        
        controls.forEach(({ id, action }) => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('click', (e) => {
                    e.preventDefault();
                    try {
                        action();
                        this.updateDisplay();
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${id}:`, error);
                        this.showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
                    }
                });
            } else {
                console.warn(`–≠–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
     */
    bindThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleTheme();
            });
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    bindSettingsControls() {
        // –°–ª–∞–π–¥–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
        const speedSlider = document.getElementById('speed-slider');
        if (speedSlider) {
            speedSlider.addEventListener('input', (e) => {
                const speed = parseInt(e.target.value);
                this.machine.setSpeed(speed);
                this.updateSpeedDisplay(speed);
            });
        }
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        const algorithmSelect = document.getElementById('algorithm-select');
        if (algorithmSelect) {
            algorithmSelect.addEventListener('change', (e) => {
                const algorithm = e.target.value;
                if (algorithm) {
                    this.loadPreset(algorithm);
                }
            });
        }
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∫—É–±–∏—Ç–æ–≤ –¥–ª—è –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const controlQubit = document.getElementById('control-qubit');
        const targetQubit = document.getElementById('target-qubit');
        
        if (controlQubit && targetQubit) {
            [controlQubit, targetQubit].forEach(select => {
                select.addEventListener('change', () => {
                    this.updateTwoQubitControls();
                });
            });
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤–µ–Ω—Ç–∏–ª–µ–π
     */
    bindGateButtons() {
        // –û–¥–Ω–æ–∫—É–±–∏—Ç–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª–∏
        const singleQubitGates = ['I', 'X', 'Y', 'Z', 'H', 'S', 'T'];
        singleQubitGates.forEach(gate => {
            const button = document.querySelector(`[data-gate="${gate}"]`);
            if (button) {
                button.addEventListener('click', () => {
                    const qubit = this.getSelectedQubit();
                    this.applyGate(gate, qubit);
                });
            }
        });
        
        // –î–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª–∏  
        const twoQubitGates = ['CNOT', 'CZ', 'SWAP'];
        twoQubitGates.forEach(gate => {
            const button = document.querySelector(`[data-gate="${gate}"]`);
            if (button) {
                button.addEventListener('click', () => {
                    const control = this.getControlQubit();
                    const target = this.getTargetQubit();
                    this.applyGate(gate, control, target);
                });
            }
        });
        
        // –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        const measureButton = document.getElementById('measure-btn');
        if (measureButton) {
            measureButton.addEventListener('click', () => {
                const qubit = this.getSelectedQubit();
                this.measureQubit(qubit);
            });
        }
        
        const measureAllButton = document.getElementById('measure-all-btn');
        if (measureAllButton) {
            measureAllButton.addEventListener('click', () => {
                this.measureAll();
            });
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤–µ–Ω—Ç–∏–ª—è
     */
    applyGate(gate, ...qubits) {
        try {
            this.machine.applyGate(gate, ...qubits);
            this.updateDisplay();
            this.logOperation(`–ü—Ä–∏–º–µ–Ω–µ–Ω –≤–µ–Ω—Ç–∏–ª—å ${gate} –∫ –∫—É–±–∏—Ç—É(–∞–º) ${qubits.join(',')}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è ${gate}:`, error);
            this.showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫—É–±–∏—Ç–∞
     */
    measureQubit(qubit) {
        try {
            const result = this.machine.measureQubit(qubit);
            this.updateDisplay();
            this.logOperation(`–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫—É–±–∏—Ç–∞ ${qubit}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${result}`);
            this.showNotification(`–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è: |${result}‚ü©`, 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤
     */
    measureAll() {
        try {
            const results = this.machine.measureAll();
            this.updateDisplay();
            this.logOperation(`–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤: ${results.join('')}`);
            this.showNotification(`–†–µ–∑—É–ª—å—Ç–∞—Ç: |${results.join('')}‚ü©`, 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É–±–∏—Ç–æ–≤:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    loadPreset(presetName) {
        try {
            this.machine.loadPreset(presetName);
            this.updateDisplay();
            this.logOperation(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: ${presetName}`);
            this.showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: ${presetName}`, 'info');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            this.showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    updateDisplay() {
        if (!this.isInitialized) return;
        
        try {
            this.updateStatusIndicators();
            this.updateQuantumVisualization();
            this.updateTapeVisualization();
            this.updateControlStates();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ—è:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    updateStatusIndicators() {
        // –°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤
        const stepCounter = document.getElementById('step-counter');
        if (stepCounter) {
            stepCounter.textContent = this.machine.stepCount;
        }
        
        // –¢–∞–π–º–µ—Ä
        const timer = document.getElementById('timer');
        if (timer) {
            timer.textContent = Utils.formatTime(this.machine.elapsedTime);
        }
        
        // –°—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
        const status = document.getElementById('status');
        if (status) {
            status.textContent = this.machine.getStatusText();
            status.className = `status ${this.machine.isRunning ? 'running' : 'stopped'}`;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    updateQuantumVisualization() {
        const selectedQubit = this.getSelectedQubit();
        const register = this.machine.getQuantumRegister();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–ª–æ—Ö-—Å—Ñ–µ—Ä—ã
        if (this.blochSphere && register) {
            const state = register.getQubitState(selectedQubit);
            if (state) {
                this.blochSphere.updateState(state);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–º–ø–ª–∏—Ç—É–¥
        if (this.amplitudeViz && register) {
            this.amplitudeViz.updateAmplitudes(register.getAmplitudes());
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    toggleTheme() {
        this.theme = this.theme === 'dark' ? 'light' : 'dark';
        document.body.setAttribute('data-theme', this.theme);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        const themeIcon = document.querySelector('.theme-icon');
        if (themeIcon) {
            themeIcon.textContent = this.theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        localStorage.setItem('qtm-theme', this.theme);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ ${this.theme === 'dark' ? '—Ç—ë–º–Ω–∞—è' : '—Å–≤–µ—Ç–ª–∞—è'} —Ç–µ–º–∞`, 'info');
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        const container = document.getElementById('notifications-container');
        if (!container) return;
        
        const notification = document.createElement('div');
        notification.className = `toast toast-${type}`;
        notification.textContent = message;
        
        container.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 4000);
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    logOperation(message) {
        const logContainer = document.getElementById('operations-log');
        if (!logContainer) return;
        
        const entry = document.createElement('div');
        entry.className = 'log-entry';
        entry.innerHTML = `
            <span class="log-time">${new Date().toLocaleTimeString()}</span>
            <span class="log-message">${message}</span>
        `;
        
        logContainer.appendChild(entry);
        logContainer.scrollTop = logContainer.scrollHeight;
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        const entries = logContainer.querySelectorAll('.log-entry');
        if (entries.length > 100) {
            entries[0].remove();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏—Ç–∞
     */
    getSelectedQubit() {
        const selector = document.getElementById('qubit-selector');
        return selector ? parseInt(selector.value) : 0;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∫—É–±–∏—Ç–∞
     */
    getControlQubit() {
        const selector = document.getElementById('control-qubit');
        return selector ? parseInt(selector.value) : 0;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∫—É–±–∏—Ç–∞
     */
    getTargetQubit() {
        const selector = document.getElementById('target-qubit');
        return selector ? parseInt(selector.value) : 1;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    loadSettings() {
        // –¢–µ–º–∞
        const savedTheme = localStorage.getItem('qtm-theme') || 
                          (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        this.theme = savedTheme;
        document.body.setAttribute('data-theme', this.theme);
        
        // –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏
        const savedSpeed = localStorage.getItem('qtm-speed');
        if (savedSpeed) {
            const speed = parseInt(savedSpeed);
            this.machine.setSpeed(speed);
            this.updateSpeedDisplay(speed);
            
            const speedSlider = document.getElementById('speed-slider');
            if (speedSlider) {
                speedSlider.value = speed;
            }
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    saveSettings() {
        localStorage.setItem('qtm-theme', this.theme);
        localStorage.setItem('qtm-speed', this.machine.speed.toString());
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    showHelp() {
        const helpModal = document.getElementById('help-modal');
        if (helpModal) {
            helpModal.setAttribute('aria-hidden', 'false');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
     */
    updateSpeedDisplay(speed) {
        const speedDisplay = document.getElementById('speed-value');
        if (speedDisplay) {
            speedDisplay.textContent = speed;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        if (this.blochSphere) {
            this.blochSphere.handleResize();
        }
        if (this.amplitudeViz) {
            this.amplitudeViz.handleResize();
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω—Ç
     */
    initializeTapeVisualization() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –¥–ª—è –ª–µ–Ω—Ç
        const tapeCanvases = document.querySelectorAll('.tape-canvas');
        tapeCanvases.forEach((canvas, index) => {
            if (canvas.getContext) {
                const ctx = canvas.getContext('2d');
                this.setupTapeCanvas(ctx, index);
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas –¥–ª—è –ª–µ–Ω—Ç—ã
     */
    setupTapeCanvas(ctx, tapeIndex) {
        const canvas = ctx.canvas;
        const dpr = window.devicePixelRatio || 1;
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º DPI
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width * dpr;
        canvas.height = rect.height * dpr;
        ctx.scale(dpr, dpr);
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        this.renderTape(ctx, tapeIndex);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–µ–Ω—Ç—ã
     */
    renderTape(ctx, tapeIndex) {
        const canvas = ctx.canvas;
        const width = canvas.width / (window.devicePixelRatio || 1);
        const height = canvas.height / (window.devicePixelRatio || 1);
        
        // –û—á–∏—Å—Ç–∫–∞
        ctx.clearRect(0, 0, width, height);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–µ–Ω—Ç—ã
        const tape = this.machine.getTape(tapeIndex);
        if (!tape) return;
        
        const cellWidth = 40;
        const cellHeight = 30;
        const startX = Math.max(0, (width - tape.length * cellWidth) / 2);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —è—á–µ–µ–∫
        tape.forEach((cell, index) => {
            const x = startX + index * cellWidth;
            const y = (height - cellHeight) / 2;
            
            // –§–æ–Ω —è—á–µ–π–∫–∏
            ctx.fillStyle = cell.isActive ? '#3182ce' : '#2d3748';
            ctx.fillRect(x, y, cellWidth - 1, cellHeight);
            
            // –û–±–≤–æ–¥–∫–∞
            ctx.strokeStyle = '#4a5568';
            ctx.strokeRect(x, y, cellWidth - 1, cellHeight);
            
            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
            if (cell.value !== null) {
                ctx.fillStyle = '#ffffff';
                ctx.font = '14px monospace';
                ctx.textAlign = 'center';
                ctx.fillText(cell.value.toString(), x + cellWidth/2, y + cellHeight/2 + 4);
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω—Ç
     */
    updateTapeVisualization() {
        const tapeCanvases = document.querySelectorAll('.tape-canvas');
        tapeCanvases.forEach((canvas, index) => {
            if (canvas.getContext) {
                const ctx = canvas.getContext('2d');
                this.renderTape(ctx, index);
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
     */
    updateControlStates() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const startBtn = document.getElementById('start-btn');
        const stopBtn = document.getElementById('stop-btn');
        const stepBtn = document.getElementById('step-btn');
        
        if (startBtn) startBtn.disabled = this.machine.isRunning;
        if (stopBtn) stopBtn.disabled = !this.machine.isRunning;
        if (stepBtn) stepBtn.disabled = this.machine.isRunning;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–µ–Ω—Ç–∏–ª–µ–π
        const gateButtons = document.querySelectorAll('[data-gate]');
        gateButtons.forEach(button => {
            button.disabled = this.machine.isRunning;
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –¥–ª—è –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    updateTwoQubitControls() {
        const controlQubit = this.getControlQubit();
        const targetQubit = this.getTargetQubit();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        const warning = document.getElementById('two-qubit-warning');
        if (warning) {
            warning.style.display = (controlQubit === targetQubit) ? 'block' : 'none';
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã—Ö –≤–µ–Ω—Ç–∏–ª–µ–π
        const twoQubitButtons = document.querySelectorAll('[data-gate="CNOT"], [data-gate="CZ"], [data-gate="SWAP"]');
        twoQubitButtons.forEach(button => {
            button.disabled = this.machine.isRunning || (controlQubit === targetQubit);
        });
    }
}

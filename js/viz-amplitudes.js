// path: js/viz-amplitudes.js

import { Utils } from './utils.js';

/**
 * –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–º–ø–ª–∏—Ç—É–¥ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç Re/Im —á–∞—Å—Ç–∏ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ |œà|¬≤
 */
export class AmplitudeVisualizer {
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.isInitialized = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.showReal = true;
        this.showImaginary = true;
        this.showProbabilities = true;
        this.showLabels = true;
        this.animationEnabled = true;
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.currentAmplitudes = [];
        this.targetAmplitudes = [];
        this.animationProgress = 1;
        this.animationDuration = 300; // –º—Å
        this.lastUpdateTime = 0;
        
        // –¶–≤–µ—Ç–∞
        this.colors = {
            real: '#3b82f6',        // –°–∏–Ω–∏–π –¥–ª—è Re
            imaginary: '#ef4444',   // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è Im  
            probability: '#10b981', // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è |œà|¬≤
            background: '#1f2937',  // –§–æ–Ω
            grid: '#374151',        // –°–µ—Ç–∫–∞
            text: '#f9fafb',        // –¢–µ–∫—Å—Ç
            axis: '#6b7280'         // –û—Å–∏
        };
        
        console.log('üìä –°–æ–∑–¥–∞–Ω –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–º–ø–ª–∏—Ç—É–¥');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
     */
    async initialize() {
        try {
            this.setupCanvas();
            this.setupEventListeners();
            this.draw();
            
            this.isInitialized = true;
            console.log('‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–º–ø–ª–∏—Ç—É–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞–º–ø–ª–∏—Ç—É–¥:', error);
            throw error;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas
     */
    setupCanvas() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º DPI
        const dpr = window.devicePixelRatio || 1;
        const rect = this.canvas.getBoundingClientRect();
        
        this.canvas.width = rect.width * dpr;
        this.canvas.height = rect.height * dpr;
        this.ctx.scale(dpr, dpr);
        
        // –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.width = rect.width;
        this.height = rect.height;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = 'high';
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', Utils.debounce(() => {
            this.handleResize();
        }, 200));
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const controls = [
            { id: 'show-real', prop: 'showReal' },
            { id: 'show-imaginary', prop: 'showImaginary' },
            { id: 'show-probabilities', prop: 'showProbabilities' }
        ];
        
        controls.forEach(({ id, prop }) => {
            const checkbox = document.getElementById(id);
            if (checkbox) {
                checkbox.checked = this[prop];
                checkbox.addEventListener('change', (e) => {
                    this[prop] = e.target.checked;
                    this.draw();
                });
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥
     */
    updateAmplitudes(amplitudes) {
        if (!amplitudes || !this.isInitialized) return;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∞–º–ø–ª–∏—Ç—É–¥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.currentAmplitudes = this.targetAmplitudes.length > 0 
            ? [...this.targetAmplitudes] 
            : amplitudes.map(amp => ({ re: 0, im: 0, prob: 0 }));
        
        this.targetAmplitudes = amplitudes.map(amp => ({
            re: amp.re || 0,
            im: amp.im || 0, 
            prob: amp.prob || (amp.re * amp.re + amp.im * amp.im)
        }));
        
        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.animationEnabled) {
            this.startAnimation();
        } else {
            this.currentAmplitudes = [...this.targetAmplitudes];
            this.draw();
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    startAnimation() {
        this.animationProgress = 0;
        this.lastUpdateTime = performance.now();
        this.animate();
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
     */
    animate() {
        const currentTime = performance.now();
        const deltaTime = currentTime - this.lastUpdateTime;
        
        this.animationProgress += deltaTime / this.animationDuration;
        
        if (this.animationProgress >= 1) {
            this.animationProgress = 1;
            this.currentAmplitudes = [...this.targetAmplitudes];
        } else {
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º–∏ –∏ —Ü–µ–ª–µ–≤—ã–º–∏ –∞–º–ø–ª–∏—Ç—É–¥–∞–º–∏
            this.currentAmplitudes = this.currentAmplitudes.map((current, index) => {
                const target = this.targetAmplitudes[index] || { re: 0, im: 0, prob: 0 };
                const progress = this.easeInOutCubic(this.animationProgress);
                
                return {
                    re: current.re + (target.re - current.re) * progress,
                    im: current.im + (target.im - current.im) * progress,
                    prob: current.prob + (target.prob - current.prob) * progress
                };
            });
        }
        
        this.draw();
        this.lastUpdateTime = currentTime;
        
        if (this.animationProgress < 1) {
            requestAnimationFrame(() => this.animate());
        }
    }
    
    /**
     * –§—É–Ω–∫—Ü–∏—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
     */
    draw() {
        if (!this.isInitialized) return;
        
        // –û—á–∏—Å—Ç–∫–∞ canvas
        this.ctx.clearRect(0, 0, this.width, this.height);
        
        // –§–æ–Ω
        this.ctx.fillStyle = this.colors.background;
        this.ctx.fillRect(0, 0, this.width, this.height);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!this.currentAmplitudes || this.currentAmplitudes.length === 0) {
            this.drawEmptyState();
            return;
        }
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞
        const layout = this.calculateLayout();
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ –∏ –æ—Å–µ–π
        this.drawGrid(layout);
        this.drawAxes(layout);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (this.showReal) {
            this.drawBars(layout, 'real');
        }
        
        if (this.showImaginary) {
            this.drawBars(layout, 'imaginary');
        }
        
        if (this.showProbabilities) {
            this.drawBars(layout, 'probability');
        }
        
        // –ü–æ–¥–ø–∏—Å–∏ –∏ –ª–µ–≥–µ–Ω–¥–∞
        if (this.showLabels) {
            this.drawLabels(layout);
            this.drawLegend();
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
     */
    calculateLayout() {
        const padding = 60;
        const legendHeight = 40;
        
        const numStates = this.currentAmplitudes.length;
        const barsPerType = this.getActiveBarCount();
        
        return {
            padding: padding,
            plotWidth: this.width - 2 * padding,
            plotHeight: this.height - 2 * padding - legendHeight,
            plotX: padding,
            plotY: padding,
            barWidth: Math.max(8, (this.width - 2 * padding) / (numStates * barsPerType + numStates - 1)),
            numStates: numStates,
            barsPerType: barsPerType,
            maxValue: this.calculateMaxValue(),
            legendY: this.height - legendHeight
        };
    }
    
    /**
     * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∞—Ä–æ–≤
     */
    getActiveBarCount() {
        return (this.showReal ? 1 : 0) + 
               (this.showImaginary ? 1 : 0) + 
               (this.showProbabilities ? 1 : 0);
    }
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    calculateMaxValue() {
        let maxValue = 0;
        
        this.currentAmplitudes.forEach(amp => {
            if (this.showReal) maxValue = Math.max(maxValue, Math.abs(amp.re));
            if (this.showImaginary) maxValue = Math.max(maxValue, Math.abs(amp.im));
            if (this.showProbabilities) maxValue = Math.max(maxValue, amp.prob);
        });
        
        return Math.max(maxValue, 0.1); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
     */
    drawGrid(layout) {
        this.ctx.strokeStyle = this.colors.grid;
        this.ctx.lineWidth = 0.5;
        this.ctx.setLineDash([2, 2]);
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        const numHorizontalLines = 5;
        for (let i = 0; i <= numHorizontalLines; i++) {
            const y = layout.plotY + (layout.plotHeight * i) / numHorizontalLines;
            
            this.ctx.beginPath();
            this.ctx.moveTo(layout.plotX, y);
            this.ctx.lineTo(layout.plotX + layout.plotWidth, y);
            this.ctx.stroke();
        }
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for (let i = 0; i < layout.numStates; i++) {
            const x = layout.plotX + (layout.plotWidth * i) / layout.numStates;
            
            this.ctx.beginPath();
            this.ctx.moveTo(x, layout.plotY);
            this.ctx.lineTo(x, layout.plotY + layout.plotHeight);
            this.ctx.stroke();
        }
        
        this.ctx.setLineDash([]);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–µ–π
     */
    drawAxes(layout) {
        this.ctx.strokeStyle = this.colors.axis;
        this.ctx.lineWidth = 2;
        
        // –û—Å—å X
        this.ctx.beginPath();
        this.ctx.moveTo(layout.plotX, layout.plotY + layout.plotHeight);
        this.ctx.lineTo(layout.plotX + layout.plotWidth, layout.plotY + layout.plotHeight);
        this.ctx.stroke();
        
        // –û—Å—å Y
        this.ctx.beginPath();
        this.ctx.moveTo(layout.plotX, layout.plotY);
        this.ctx.lineTo(layout.plotX, layout.plotY + layout.plotHeight);
        this.ctx.stroke();
        
        // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        this.ctx.fillStyle = this.colors.text;
        this.ctx.font = '12px sans-serif';
        this.ctx.textAlign = 'center';
        
        // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ Y
        const numYLabels = 5;
        for (let i = 0; i <= numYLabels; i++) {
            const value = (layout.maxValue * (numYLabels - i)) / numYLabels;
            const y = layout.plotY + (layout.plotHeight * i) / numYLabels;
            
            this.ctx.textAlign = 'right';
            this.ctx.fillText(value.toFixed(2), layout.plotX - 10, y + 4);
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
     */
    drawBars(layout, type) {
        const color = this.colors[type];
        const barOffset = this.getBarOffset(type);
        const barSpacing = 2;
        
        this.currentAmplitudes.forEach((amp, stateIndex) => {
            let value, height;
            
            switch (type) {
                case 'real':
                    value = amp.re;
                    height = Math.abs(value) / layout.maxValue * layout.plotHeight;
                    break;
                case 'imaginary': 
                    value = amp.im;
                    height = Math.abs(value) / layout.maxValue * layout.plotHeight;
                    break;
                case 'probability':
                    value = amp.prob;
                    height = value / layout.maxValue * layout.plotHeight;
                    break;
            }
            
            // –ü–æ–∑–∏—Ü–∏—è —Å—Ç–æ–ª–±—Ü–∞
            const groupX = layout.plotX + (layout.plotWidth * stateIndex) / layout.numStates;
            const barX = groupX + barOffset * (layout.barWidth + barSpacing);
            const barY = value >= 0 
                ? layout.plotY + layout.plotHeight - height
                : layout.plotY + layout.plotHeight;
            
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞
            this.ctx.fillStyle = color;
            this.ctx.fillRect(barX, barY, layout.barWidth, height);
            
            // –û–±–≤–æ–¥–∫–∞
            this.ctx.strokeStyle = Utils.darkenColor(color, 0.2);
            this.ctx.lineWidth = 1;
            this.ctx.strokeRect(barX, barY, layout.barWidth, height);
            
            // –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–æ–º (–¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤)
            if (layout.numStates <= 8 && height > 20) {
                this.ctx.fillStyle = this.colors.text;
                this.ctx.font = '10px monospace';
                this.ctx.textAlign = 'center';
                
                const textY = barY - 5;
                this.ctx.fillText(value.toFixed(3), barX + layout.barWidth/2, textY);
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Ç–∏–ø–∞
     */
    getBarOffset(type) {
        let offset = 0;
        
        if (type === 'real') return 0;
        if (this.showReal) offset++;
        
        if (type === 'imaginary') return offset;
        if (this.showImaginary) offset++;
        
        if (type === 'probability') return offset;
        
        return offset;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    drawLabels(layout) {
        this.ctx.fillStyle = this.colors.text;
        this.ctx.font = '12px monospace';
        this.ctx.textAlign = 'center';
        
        this.currentAmplitudes.forEach((amp, stateIndex) => {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, |00‚ü©, |01‚ü©, ...)
            const stateBinary = stateIndex.toString(2).padStart(Math.ceil(Math.log2(this.currentAmplitudes.length)), '0');
            const label = `|${stateBinary}‚ü©`;
            
            const x = layout.plotX + (layout.plotWidth * stateIndex) / layout.numStates + layout.plotWidth / (2 * layout.numStates);
            const y = layout.plotY + layout.plotHeight + 20;
            
            this.ctx.fillText(label, x, y);
        });
        
        // –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ Y
        this.ctx.save();
        this.ctx.translate(20, layout.plotY + layout.plotHeight / 2);
        this.ctx.rotate(-Math.PI / 2);
        this.ctx.textAlign = 'center';
        this.ctx.fillText('–ê–º–ø–ª–∏—Ç—É–¥–∞', 0, 0);
        this.ctx.restore();
        
        // –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ X
        this.ctx.textAlign = 'center';
        this.ctx.fillText('–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è', layout.plotX + layout.plotWidth / 2, layout.plotY + layout.plotHeight + 40);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
     */
    drawLegend() {
        const legendItems = [];
        
        if (this.showReal) legendItems.push({ color: this.colors.real, label: 'Re(œà)' });
        if (this.showImaginary) legendItems.push({ color: this.colors.imaginary, label: 'Im(œà)' });  
        if (this.showProbabilities) legendItems.push({ color: this.colors.probability, label: '|œà|¬≤' });
        
        if (legendItems.length === 0) return;
        
        const legendY = this.height - 30;
        const itemWidth = 80;
        const startX = (this.width - legendItems.length * itemWidth) / 2;
        
        this.ctx.font = '12px sans-serif';
        
        legendItems.forEach((item, index) => {
            const x = startX + index * itemWidth;
            
            // –¶–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç
            this.ctx.fillStyle = item.color;
            this.ctx.fillRect(x, legendY - 6, 12, 12);
            
            // –¢–µ–∫—Å—Ç
            this.ctx.fillStyle = this.colors.text;
            this.ctx.textAlign = 'left';
            this.ctx.fillText(item.label, x + 16, legendY + 4);
        });
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    drawEmptyState() {
        this.ctx.fillStyle = this.colors.text;
        this.ctx.font = '16px sans-serif';
        this.ctx.textAlign = 'center';
        
        const centerX = this.width / 2;
        const centerY = this.height / 2;
        
        this.ctx.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', centerX, centerY);
        this.ctx.font = '14px sans-serif';
        this.ctx.fillText('–°–æ–∑–¥–∞–π—Ç–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É', centerX, centerY + 25);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    handleResize() {
        this.setupCanvas();
        this.draw();
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    setAnimationEnabled(enabled) {
        this.animationEnabled = enabled;
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    exportImage() {
        return this.canvas.toDataURL('image/png');
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    saveAsImage(filename = 'quantum-amplitudes.png') {
        const link = document.createElement('a');
        link.download = filename;
        link.href = this.exportImage();
        link.click();
    }
}

// path: tests/tests.js
/**
 * Unit-—Ç–µ—Å—Ç—ã –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 * 
 * @author Quantum Computing Expert
 * @version 2.0.0
 */

import { Complex, ComplexUtils } from '../js/complex.js';
import { QuantumState } from '../js/quantum-state.js';
import { QuantumGates } from '../js/quantum-gates.js';
import { QuantumRegister } from '../js/quantum-register.js';
import { QuantumAlgorithms } from '../js/algorithms.js';

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class TestFramework {
    constructor() {
        this.tests = [];
        this.passed = 0;
        this.failed = 0;
        this.startTime = 0;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
     * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
     * @param {Function} testFn - –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
     */
    test(name, testFn) {
        this.tests.push({ name, testFn });
    }

    /**
     * Assertion - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è
     * @param {boolean} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    assert(condition, message = 'Assertion failed') {
        if (!condition) {
            throw new Error(message);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é
     * @param {number} actual - –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} expected - –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} epsilon - –¢–æ—á–Ω–æ—Å—Ç—å
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    assertApproximately(actual, expected, epsilon = 1e-10, message = '') {
        const diff = Math.abs(actual - expected);
        if (diff > epsilon) {
            throw new Error(`${message} - Expected ${expected}, got ${actual}, diff ${diff}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
     * @param {Complex} actual - –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {Complex} expected - –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} epsilon - –¢–æ—á–Ω–æ—Å—Ç—å
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    assertComplexEquals(actual, expected, epsilon = 1e-10, message = '') {
        if (!actual.equals(expected, epsilon)) {
            throw new Error(`${message} - Expected ${expected.toString()}, got ${actual.toString()}`);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    async run() {
        console.log('üß™ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...\n');
        this.startTime = Date.now();
        
        for (const test of this.tests) {
            try {
                await test.testFn();
                this.passed++;
                console.log(`‚úÖ ${test.name}`);
            } catch (error) {
                this.failed++;
                console.error(`‚ùå ${test.name}: ${error.message}`);
                console.error(error.stack);
            }
        }

        this.printSummary();
    }

    /**
     * –ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    printSummary() {
        const totalTime = Date.now() - this.startTime;
        const total = this.passed + this.failed;
        
        console.log('\n' + '='.repeat(50));
        console.log('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('='.repeat(50));
        console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`);
        console.log(`–£—Å–ø–µ—à–Ω–æ: ${this.passed}`);
        console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}–º—Å`);
        console.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((this.passed / total) * 100).toFixed(1)}%`);
        
        if (this.failed === 0) {
            console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã');
        }
        console.log('='.repeat(50));
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const test = new TestFramework();

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –ß–ò–°–ï–õ
// ============================================================================

test.test('Complex: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–≤–æ–π—Å—Ç–≤–∞', () => {
    const z1 = new Complex(3, 4);
    test.assert(z1.re === 3, '–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3');
    test.assert(z1.im === 4, '–ú–Ω–∏–º–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 4');
    test.assertApproximately(z1.abs(), 5, 1e-10, '–ú–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5');
    test.assertApproximately(z1.arg(), Math.atan2(4, 3), 1e-10, '–ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π');
});

test.test('Complex: –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', () => {
    const z1 = new Complex(2, 3);
    const z2 = new Complex(1, -1);
    
    // –°–ª–æ–∂–µ–Ω–∏–µ
    const sum = z1.add(z2);
    test.assertComplexEquals(sum, new Complex(3, 2), 1e-10, '–°–ª–æ–∂–µ–Ω–∏–µ');
    
    // –í—ã—á–∏—Ç–∞–Ω–∏–µ
    const diff = z1.sub(z2);
    test.assertComplexEquals(diff, new Complex(1, 4), 1e-10, '–í—ã—á–∏—Ç–∞–Ω–∏–µ');
    
    // –£–º–Ω–æ–∂–µ–Ω–∏–µ
    const mult = z1.mul(z2);
    test.assertComplexEquals(mult, new Complex(5, 1), 1e-10, '–£–º–Ω–æ–∂–µ–Ω–∏–µ');
    
    // –î–µ–ª–µ–Ω–∏–µ
    const div = z1.div(z2);
    test.assertComplexEquals(div, new Complex(-0.5, 2.5), 1e-10, '–î–µ–ª–µ–Ω–∏–µ');
});

test.test('Complex: –°–æ–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞', () => {
    const z = new Complex(1, 2);
    const conj = z.conj();
    test.assertComplexEquals(conj, new Complex(1, -2), 1e-10, '–°–æ–ø—Ä—è–∂–µ–Ω–∏–µ');
    
    // exp(iœÄ) = -1
    const expPi = Complex.exp(Math.PI);
    test.assertComplexEquals(expPi, new Complex(-1, 0), 1e-10, 'exp(iœÄ) = -1');
    
    // exp(iœÄ/2) = i
    const expPiHalf = Complex.exp(Math.PI / 2);
    test.assertComplexEquals(expPiHalf, new Complex(0, 1), 1e-10, 'exp(iœÄ/2) = i');
});

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–í–ê–ù–¢–û–í–´–• –°–û–°–¢–û–Ø–ù–ò–ô
// ============================================================================

test.test('QuantumState: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–∏—Å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π', () => {
    const state0 = QuantumState.zero();
    test.assertApproximately(state0.getProbability0(), 1, 1e-10, 'P(0) –¥–ª—è |0‚ü©');
    test.assertApproximately(state0.getProbability1(), 0, 1e-10, 'P(1) –¥–ª—è |0‚ü©');
    
    const state1 = QuantumState.one();
    test.assertApproximately(state1.getProbability0(), 0, 1e-10, 'P(0) –¥–ª—è |1‚ü©');
    test.assertApproximately(state1.getProbability1(), 1, 1e-10, 'P(1) –¥–ª—è |1‚ü©');
});

test.test('QuantumState: –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–π', () => {
    const statePlus = QuantumState.plus();
    test.assertApproximately(statePlus.getProbability0(), 0.5, 1e-10, 'P(0) –¥–ª—è |+‚ü©');
    test.assertApproximately(statePlus.getProbability1(), 0.5, 1e-10, 'P(1) –¥–ª—è |+‚ü©');
    
    const stateMinus = QuantumState.minus();
    test.assertApproximately(stateMinus.getProbability0(), 0.5, 1e-10, 'P(0) –¥–ª—è |-‚ü©');
    test.assertApproximately(stateMinus.getProbability1(), 0.5, 1e-10, 'P(1) –¥–ª—è |-‚ü©');
});

test.test('QuantumState: –£–≥–ª—ã –ë–ª–æ—Ö–∞', () => {
    // |0‚ü©: Œ∏ = 0, œÜ = –ª—é–±–æ–µ
    const state0 = QuantumState.zero();
    const angles0 = state0.getBlochAngles();
    test.assertApproximately(angles0.theta, 0, 1e-10, 'Œ∏ –¥–ª—è |0‚ü©');
    
    // |1‚ü©: Œ∏ = œÄ, œÜ = –ª—é–±–æ–µ
    const state1 = QuantumState.one();
    const angles1 = state1.getBlochAngles();
    test.assertApproximately(angles1.theta, Math.PI, 1e-10, 'Œ∏ –¥–ª—è |1‚ü©');
    
    // |+‚ü©: Œ∏ = œÄ/2, œÜ = 0
    const statePlus = QuantumState.plus();
    const anglesPlus = statePlus.getBlochAngles();
    test.assertApproximately(anglesPlus.theta, Math.PI / 2, 1e-10, 'Œ∏ –¥–ª—è |+‚ü©');
    test.assertApproximately(anglesPlus.phi, 0, 1e-10, 'œÜ –¥–ª—è |+‚ü©');
});

test.test('QuantumState: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è', () => {
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const alpha = new Complex(3, 4);
    const beta = new Complex(1, 2);
    const state = new QuantumState(alpha, beta);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∏—Ä–æ–≤–∫—É
    const totalProb = state.getProbability0() + state.getProbability1();
    test.assertApproximately(totalProb, 1, 1e-10, '–°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1');
});

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–í–ê–ù–¢–û–í–´–• –í–ï–ù–¢–ò–õ–ï–ô
// ============================================================================

test.test('QuantumGates: –ü–∞—É–ª–∏-X (NOT)', () => {
    const state0 = QuantumState.zero();
    const state1 = QuantumGates.pauliX(state0);
    
    test.assertApproximately(state1.getProbability0(), 0, 1e-10, 'X|0‚ü© = |1‚ü©');
    test.assertApproximately(state1.getProbability1(), 1, 1e-10, 'X|0‚ü© = |1‚ü©');
});

test.test('QuantumGates: Hadamard', () => {
    const state0 = QuantumState.zero();
    const statePlus = QuantumGates.hadamard(state0);
    
    test.assertApproximately(statePlus.getProbability0(), 0.5, 1e-10, 'H|0‚ü© –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å |0‚ü©');
    test.assertApproximately(statePlus.getProbability1(), 0.5, 1e-10, 'H|0‚ü© –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å |1‚ü©');
    
    // H|1‚ü© = |-‚ü©
    const state1 = QuantumState.one();
    const stateMinus = QuantumGates.hadamard(state1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ |-‚ü© (–∞–º–ø–ª–∏—Ç—É–¥—ã (1, -1)/‚àö2)
    const expectedMinus = QuantumState.minus();
    test.assert(stateMinus.alpha.equals(expectedMinus.alpha, 1e-10), 'H|1‚ü© alpha');
    test.assert(stateMinus.beta.equals(expectedMinus.beta, 1e-10), 'H|1‚ü© beta');
});

test.test('QuantumGates: –ü–∞—É–ª–∏-Z', () => {
    // Z|0‚ü© = |0‚ü©
    const state0 = QuantumState.zero();
    const zState0 = QuantumGates.pauliZ(state0);
    test.assert(zState0.equals(state0, 1e-10), 'Z|0‚ü© = |0‚ü©');
    
    // Z|1‚ü© = -|1‚ü©
    const state1 = QuantumState.one();
    const zState1 = QuantumGates.pauliZ(state1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–º–ø–ª–∏—Ç—É–¥–∞ |1‚ü© –∏–∑–º–µ–Ω–∏–ª–∞ –∑–Ω–∞–∫
    test.assertComplexEquals(zState1.beta, new Complex(-1, 0), 1e-10, 'Z|1‚ü© = -|1‚ü©');
});

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –î–í–£–•–ö–£–ë–ò–¢–ù–´–• –û–ü–ï–†–ê–¶–ò–ô
// ============================================================================

test.test('QuantumRegister: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', () => {
    const register = new QuantumRegister(2);
    
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ |00‚ü©
    test.assertApproximately(register.getProbability(0), 1, 1e-10, '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ |00‚ü©');
    test.assert(register.isNormalized(), '–†–µ–≥–∏—Å—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ H –∫ –ø–µ—Ä–≤–æ–º—É –∫—É–±–∏—Ç—É
    register.applySingleQubitGate(QuantumGates.H(), 0);
    
    // –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è (|00‚ü© + |10‚ü©)/‚àö2
    test.assertApproximately(register.getProbability(0), 0.5, 1e-10, 'P(|00‚ü©) –ø–æ—Å–ª–µ H');
    test.assertApproximately(register.getProbability(2), 0.5, 1e-10, 'P(|10‚ü©) –ø–æ—Å–ª–µ H');
});

test.test('QuantumRegister: CNOT –∏ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å', () => {
    const register = new QuantumRegister(2);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–µ–ª–ª–∞: H –Ω–∞ –ø–µ—Ä–≤–æ–º –∫—É–±–∏—Ç–µ, –∑–∞—Ç–µ–º CNOT
    register.applySingleQubitGate(QuantumGates.H(), 0);
    register.applyTwoQubitGate(QuantumGates.CNOT(), 0, 1);
    
    // –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è (|00‚ü© + |11‚ü©)/‚àö2
    test.assertApproximately(register.getProbability(0), 0.5, 1e-10, 'P(|00‚ü©) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–µ–ª–ª–∞');
    test.assertApproximately(register.getProbability(3), 0.5, 1e-10, 'P(|11‚ü©) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–µ–ª–ª–∞');
    test.assertApproximately(register.getProbability(1), 0, 1e-10, 'P(|01‚ü©) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–µ–ª–ª–∞');
    test.assertApproximately(register.getProbability(2), 0, 1e-10, 'P(|10‚ü©) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–µ–ª–ª–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å
    const entanglement = register.getEntanglementMeasure();
    test.assert(entanglement > 0.5, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–º');
});

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ê–õ–ì–û–†–ò–¢–ú–û–í
// ============================================================================

test.test('–ê–ª–≥–æ—Ä–∏—Ç–º –î–æ–π—á–∞: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', () => {
    const result = QuantumAlgorithms.deutschAlgorithm('constant-0');
    
    test.assert(result.algorithm === 'Deutsch', '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞');
    test.assert(result.interpretation === '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è', '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    test.assert(result.isCorrect, '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º');
    test.assert(result.steps.length >= 4, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —à–∞–≥–æ–≤');
});

test.test('–ê–ª–≥–æ—Ä–∏—Ç–º –î–æ–π—á–∞: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', () => {
    const result = QuantumAlgorithms.deutschAlgorithm('balanced-identity');
    
    test.assert(result.interpretation === '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    test.assert(result.isCorrect, '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º');
});

test.test('–ê–ª–≥–æ—Ä–∏—Ç–º –ì—Ä–æ–≤–µ—Ä–∞: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞', () => {
    const result = QuantumAlgorithms.groverAlgorithm(2, 1); // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç 2, 1 –∏—Ç–µ—Ä–∞—Ü–∏—è
    
    test.assert(result.algorithm === 'Grover', '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞');
    test.assert(result.target === 2, '–¶–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç');
    test.assert(result.iterations === 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π');
    
    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ (25%)
    test.assert(result.targetProbability > 0.25, '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞');
});

test.test('–°–æ—Å—Ç–æ—è–Ω–∏—è –ë–µ–ª–ª–∞: –°–æ–∑–¥–∞–Ω–∏–µ Œ¶+', () => {
    const result = QuantumAlgorithms.createBellState('phi+');
    
    test.assert(result.bellType === 'phi+', '–¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–µ–ª–ª–∞');
    test.assert(result.isMaximallyEntangled, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–º');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ |00‚ü© –∏ |11‚ü©
    const probs = result.probabilities;
    test.assertApproximately(probs[0], 0.5, 1e-10, 'P(|00‚ü©) –≤ Œ¶+');
    test.assertApproximately(probs[3], 0.5, 1e-10, 'P(|11‚ü©) –≤ Œ¶+');
    test.assertApproximately(probs[1], 0, 1e-10, 'P(|01‚ü©) –≤ Œ¶+');
    test.assertApproximately(probs[2], 0, 1e-10, 'P(|10‚ü©) –≤ Œ¶+');
});

// ============================================================================
// –¢–ï–°–¢–´ –ù–ê –ò–ù–í–ê–†–ò–ê–ù–¢–´ –ò –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò
// ============================================================================

test.test('–ò–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∏', () => {
    const state = QuantumState.random();
    const gates = ['H', 'X', 'Y', 'Z', 'S', 'T'];
    
    for (const gateName of gates) {
        let newState;
        switch (gateName) {
            case 'H': newState = QuantumGates.hadamard(state); break;
            case 'X': newState = QuantumGates.pauliX(state); break;
            case 'Y': newState = QuantumGates.pauliY(state); break;
            case 'Z': newState = QuantumGates.pauliZ(state); break;
            case 'S': newState = QuantumGates.sGate(state); break;
            case 'T': newState = QuantumGates.tGate(state); break;
        }
        
        const totalProb = newState.getProbability0() + newState.getProbability1();
        test.assertApproximately(totalProb, 1, 1e-10, `–ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ ${gateName}`);
    }
});

test.test('–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–ª–∞—Ö', () => {
    const z1 = new Complex(1, 1);
    const z2 = new Complex(0, 0);
    
    try {
        z1.div(z2);
        test.assert(false, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–ª—å');
    } catch (error) {
        test.assert(error.message.includes('–Ω–æ–ª—å'), '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
    }
});

test.test('–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞', () => {
    try {
        new QuantumRegister(0);
        test.assert(false, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è 0 –∫—É–±–∏—Ç–æ–≤');
    } catch (error) {
        test.assert(error.message.includes('1 –¥–æ 20'), '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
    }
    
    try {
        new QuantumRegister(25);
        test.assert(false, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –∫—É–±–∏—Ç–æ–≤');
    } catch (error) {
        test.assert(error.message.includes('1 –¥–æ 20'), '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
    }
});

// ============================================================================
// –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
// ============================================================================

test.test('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏', () => {
    const startTime = Date.now();
    const iterations = 10000;
    
    for (let i = 0; i < iterations; i++) {
        const z1 = new Complex(Math.random(), Math.random());
        const z2 = new Complex(Math.random(), Math.random());
        
        z1.add(z2).mul(z1).conj().abs();
    }
    
    const elapsed = Date.now() - startTime;
    console.log(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª: ${iterations} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${elapsed}–º—Å`);
    test.assert(elapsed < 1000, '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏');
});

test.test('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª–µ–π', () => {
    const startTime = Date.now();
    const iterations = 1000;
    
    for (let i = 0; i < iterations; i++) {
        const state = QuantumState.random();
        QuantumGates.hadamard(QuantumGates.pauliX(QuantumGates.pauliZ(state)));
    }
    
    const elapsed = Date.now() - startTime;
    console.log(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª–µ–π: ${iterations} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${elapsed}–º—Å`);
    test.assert(elapsed < 2000, '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã–º');
});

// ============================================================================
// –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í
// ============================================================================

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
test.run().then(() => {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    if (test.failed === 0) {
        console.log('\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        const requiredClasses = [Complex, QuantumState, QuantumGates, QuantumRegister, QuantumAlgorithms];
        const classNames = ['Complex', 'QuantumState', 'QuantumGates', 'QuantumRegister', 'QuantumAlgorithms'];
        
        requiredClasses.forEach((cls, index) => {
            if (typeof cls === 'function' || typeof cls === 'object') {
                console.log(`‚úÖ ${classNames[index]} - –¥–æ—Å—Ç—É–ø–µ–Ω`);
            } else {
                console.log(`‚ùå ${classNames[index]} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        const complexMethods = ['add', 'mul', 'conj', 'abs', 'arg'];
        const hasMethods = complexMethods.every(method => 
            typeof Complex.prototype[method] === 'function'
        );
        
        if (hasMethods) {
            console.log('‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã Complex - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã');
        } else {
            console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–æ–¥—ã Complex –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }
        
        console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    }
}).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { test, TestFramework };